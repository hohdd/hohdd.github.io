[
  {
    "title": "DongHD > Selection History > BACK-FORWARD",
    "subTitle": "Tạo một file custom Editor hay sử dụng, khi phình to thì tạo “Unity Editor Extension”",
    "tag": "Unity"
  },
  {
    "title": "làm gì cũng cần có kế hoạch và plan, làm ra phải phát triển và bảo trì",
    "subTitle": "ko đem con bỏ chợ, có nhiều lý thuyết và tool liên quan, chỉ cần thắc mắc-trò chuyện-tìm hiểu",
    "tag": "Unity"
  },
  {
    "title": "phân biệt instance MonoBehaviour (script) và “gameObject”",
    "subTitle": "SendMessage, BroadcastMessage có ở cả 2, nhưng Invoke, StartCoroutine thì chỉ có trên MonoBehaviour",
    "tag": "Unity"
  },
  {
    "title": "nếu muốn Children cũng được call thì sử dụng “BroadcastMessage”",
    "subTitle": "“BroadcastMessage” call methodName trên This+Children",
    "tag": "Unity"
  },
  {
    "title": "SendMessage kích hoạt gọi tất cả method của “This GameObject” kể cả method “private”",
    "subTitle": "“SendMessage” call cả method “Private”, method name không có thì sẽ có log lỗi",
    "tag": "Unity"
  },
  {
    "title": "SendMessage bị lỗi nếu không có “receiver”, children không nhận được Message",
    "subTitle": "“This GameObject” không tính Childrend! tất cả MonoBehaviour của GameObject sẽ được call",
    "tag": "Unity"
  },
  {
    "title": "Khi tìm kiếm Reference, đối tượng đó phải có trong Scence",
    "subTitle": "Script MonoBehaviour nằm trong Assets mà không đính kèm vào GameObject thì không thể tìm thấy",
    "tag": "Unity"
  },
  {
    "title": "GameObject.FindWithTag trả về GameObject.",
    "subTitle": "GetComponentInChildren chỉ tìm được những Object\/Component có extend ModalController : MonoBehaviour",
    "tag": "Unity"
  },
  {
    "title": "Gửi\/Nhận Event lúc “AddListener” phải có “sender” và “receiver” ở cùng 1 nơi",
    "subTitle": "sender.myEvent.AddListener(receiver.OnEventReceived); \/\/ [System.Serializable] public class MyIntEvent : UnityEvent<int> {}",
    "tag": "Unity"
  },
  {
    "title": "các UIDocument chung panelSettings có “rootVisualElement” riêng",
    "subTitle": "“rootVisualElement” từ UIDocument không phải là “panelSettings”",
    "tag": "Unity"
  },
  {
    "title": "sử dụng uxmlModal.CloneTree(this) thì không cần Instantiate() đã có luôn VisualElement cho “this”",
    "subTitle": "CloneTree của VisualTreeAsset sẽ Instantiate luôn cho “this” trong .CloneTree(this)",
    "tag": "Unity"
  },
  {
    "title": "Show\/Hide một VisualElement bằng ‘style.display’ và ‘style.visibility’",
    "subTitle": "this.style.display = DisplayStyle.Flex\/None; this.style.visibility = Visibility.Visible\/Hidden;",
    "tag": "Unity"
  },
  {
    "title": "UIDocument GameObject có 3 điểm: Panel Setting, Source Asset, Sort Order",
    "subTitle": "Có thể có nhiều UIDocument GameObject trong Screen và cùng trỏ đến 1 Panel Setting",
    "tag": "Unity"
  },
  {
    "title": "UXML đại diện luôn là “VisualTreeAsset”",
    "subTitle": "Kể cả có reference bằng kéo thả vào GameObject ([SerializeField])",
    "tag": "Unity"
  },
  {
    "title": "“Custom Control” gồm UXML + Script C# extend “VisualElement” (CloneTree(this))",
    "subTitle": "Script C# cần “EXPOSE to UXML and UI Builder” và cần có “DEFAULT constructor”. Script C# đại diện UXML để sử dụng trong coding (gán giá trị cần thiết ở Contructor hoặc Init khi thích hợp).",
    "tag": "Unity"
  },
  {
    "title": "“rootVisualElement” là một “VisualElement”, giống “gameObject” luôn có sẵn",
    "subTitle": "“rootVisualElement” là một “VisualElement”, giống “gameObject” luôn có sẵn và reference đển TOP-Element (giống “document” của HTML)",
    "tag": "Unity"
  },
  {
    "title": "Load UXML sẽ được object kiểu “VisualTreeAsset” => cần .Instantiate() để được “VisualElement”",
    "subTitle": "Load UXML sẽ được object kiểu “VisualTreeAsset” => cần .Instantiate() để được “VisualElement”",
    "tag": "Unity"
  },
  {
    "title": "Debug: VS attach to Unity, AssetDatabase cần full path, Resources ko kèm phần mở rộng của file name",
    "subTitle": "AssetDatabase.LoadAssetAtPath cần điền full “Assets\/…jpg”, Resources.Load tính từ Assets\/Resources, ko tính Resources, không bao gồm phần mở rộng file (.jpg)",
    "tag": "Unity"
  },
  {
    "title": "[CreateAssetMenu] \/\/ This adds an entry to the Create menu",
    "subTitle": "để thêm một sub-menu vào “Assets\/Create” menu để tạo nhanh một instance class (file.asset)",
    "tag": "Unity"
  },
  {
    "title": "“public class CharacterData : ScriptableObject” ko cần đính kèm vào GameObject",
    "subTitle": "“ScriptableObject” có thể sử dụng mà không cần tạo các đối tượng gắn vào GameObject.",
    "tag": "Unity"
  },
  {
    "title": "Làm việc với UI Builder: trong inspector, giá trị nào được sửa sẽ có đánh dấu LEFT màu trắng",
    "subTitle": "trong UXML sử dụng thuộc tính class=”\" giống HTML CSS, các style khác sẽ là inline-style của Element",
    "tag": "Unity"
  },
  {
    "title": "Quy tắc bàn tay trái: [TRỤC Z]: là hướng người nhìn thẳng phía trước",
    "subTitle": "[TRỤC Z]: hướng người nhìn thẳng phía trước, [+] đi ra về phía trước, [-] đi về phía sau lưng",
    "tag": "Unity"
  },
  {
    "title": "Quy tắc bàn tay trái: [TRỤC Y]: là phương thẳng đứng (không nhầm lẫn với Z)",
    "subTitle": "[TRỤC Y]: là phương thẳng đứng, [+] lên trên, [-] xuống dưới",
    "tag": "Unity"
  },
  {
    "title": "Quy tắc bàn tay trái: [TRỤC X]: là hướng ngang (dang 2 tay)",
    "subTitle": "[TRỤC X]: hướng ngang (dang 2 tay), [+] đi về bên phải, [-] đi về bên trái",
    "tag": "Unity"
  },
  {
    "title": "Rotate: Phương thức này xoay GameObject theo một góc.",
    "subTitle": "gameObject.transform.Rotate(new Vector3(0, 0, 1)); \/\/ X-Y-Z của ‘Vector3’ tùy theo quy tắc bàn tay trái",
    "tag": "Unity"
  },
  {
    "title": "Translate: Phương thức này di chuyển GameObject theo một vector.",
    "subTitle": "gameObject.Translate(1, 0, 0); \/\/ X-Y-Z của ‘Translate’ tùy theo quy tắc bàn tay trái",
    "tag": "Unity"
  },
  {
    "title": "Reference: Biến gameObject sẽ luôn trỏ đến GameObject đang được đính kèm Script hiện tại.",
    "subTitle": "otherGameObj.GetComponent(); GameObject.Find(), FindWithTag, FindGameObjectsWithTag",
    "tag": "Unity"
  },
  {
    "title": "Camera: Ctrl+Shift+F -> chuyển góc nhìn của Scence hiện tại vào Camera",
    "subTitle": "từ Scene View -> chọn Camera -> Ctrl+Shift+F để nhanh chóng căn chỉnh Camera với những gì đang nhìn thấy trong Scene",
    "tag": "Unity"
  },
  {
    "title": "Physics: tùy tương tác muốn mô phỏng để sử dụng component phù hợp CharacterController, Rigidbody, Collision",
    "subTitle": "Character Controller, Rigidbody, Kinematic, Convex, Constant Force, Interpolate\/Extrapolate, Collision, Joints, Articulations, Cloth…",
    "tag": "Unity"
  },
  {
    "title": "Mobile device input: Multi-touch screen… trạng thái và số lượng ngón tay touch…",
    "subTitle": "Chuyên sâu hơn Touch còn có “Lực nhấn”, “điểm tiếp xúc đầu tiên”, là Pen (bút cảm ứng)…",
    "tag": "Unity"
  },
  {
    "title": "Input System: sử dụng interface của Unity, còn lại để Unity tự xử lý.",
    "subTitle": "Input.GetAxis(“Horizontal\/Vertical”); …GetAxisRaw, GetKeyDown, GetKeyUp;",
    "tag": "Unity"
  },
  {
    "title": "Project Structure: Tổ chức tốt sẽ giúp bạn dễ dàng tìm thấy các tài sản mà bạn cần.",
    "subTitle": "Sử dụng các tên thư mục mô tả nội dung\/mục đích\/scope-phạm vi của chúng",
    "tag": "Unity"
  },
  {
    "title": "Preset Manager: sử dụng để đặt trước giá trị mặc định của component, import Assets",
    "subTitle": "Unity còn áp dụng Giá trị đặt trước mặc định khi bạn sử dụng lệnh Reset trong Inspector.",
    "tag": "Unity"
  },
  {
    "title": "“Tag” là một từ tham chiếu mà bạn có thể gán cho một hoặc nhiều GameObject",
    "subTitle": "sử dụng “Tag” để tìm reference trong code (FindWithTag)",
    "tag": "Unity"
  },
  {
    "title": "Nếu bạn Deactivate một GameObject gốc thì bạn cũng Deactivate tất cả các GameObject con của nó",
    "subTitle": "việc Deactivate sẽ ghi đè cài đặt “activeSelf” trên tất cả các GameObject con.",
    "tag": "Unity"
  },
  {
    "title": "Deactivate GameObjects: đánh dấu GameObject là “inactive” (trong Inspector)",
    "subTitle": "trong Script sử dụng method SetActive",
    "tag": "Unity"
  },
  {
    "title": "Testing properties: trong “Play Mode” có thể thay đổi value của properties để xem nó tác động thế nào đến trò chơi",
    "subTitle": "khi thoát “properties” value sẽ được reset.",
    "tag": "Unity"
  },
  {
    "title": "Việc thay đổi Scale ảnh hưởng đến Position của child Transforms",
    "subTitle": "Ví dụ: Scale cha mẹ thành (0,0,0) sẽ định vị tất cả Child ở (0,0,0) so với cha mẹ.",
    "tag": "Unity"
  },
  {
    "title": "Transforms: Parenting Transforms về <0,0,0> trước khi thêm Child",
    "subTitle": "Điều này có nghĩa là tọa độ cục bộ của Child sẽ giống với tọa độ chung, giúp bạn dễ dàng đảm bảo rằng bạn đặt Child ở đúng vị trí.",
    "tag": "Unity"
  },
  {
    "title": "Không nên điều chỉnh Scale của Transform Component. Tùy chọn tốt nhất là tạo Models real-life sale.",
    "subTitle": "Kích thước của Mesh trong Unity (và do đó là thang đo của Transform) rất quan trọng, đặc biệt là trong quá trình mô phỏng vật lý.",
    "tag": "Unity"
  },
  {
    "title": "Inspector-Transform expressions: L(a,b), R(a,b), +=, -=, *=, \/= …",
    "subTitle": "sqrt(a), floor(a), ceil(a), round(a), cos(a), sin(a), tan(a), pi",
    "tag": "Unity"
  },
  {
    "title": "Focused Inspectors (Alt+P): luôn hiển thị Inspector ở một cửa sổ mới",
    "subTitle": "hoặc mở bằng Right-click và chọn Properties…",
    "tag": "Unity"
  },
  {
    "title": "“Lock the Inspector” để chỉnh sửa properties mà không bị nhảy sang Inspector khác",
    "subTitle": "“Toggle Debug Mode” để hiển thị cả biến private mặc dù không chỉnh sửa được chúng",
    "tag": "Unity"
  },
  {
    "title": "Unity Search (Ctrl+K): có thể save những search thường xuyên…",
    "subTitle": "có thể xem nhanh với inspector, kéo thả vào Hierarchy…",
    "tag": "Unity"
  }
]
